function htmlout_zbksh {
  typeset VERSION="3.2"
  typeset TRUE="0"
  typeset FALSE="1"
  typeset VERBOSE="${FALSE}"
  typeset VERYVERB="${FALSE}"
  typeset OPTIND="1"
  typeset DESC="undefined"
  typeset VERIFIEDBY="undefined"
  typeset ANS[0]="Good"
  typeset ANS[1]="Bad"
  typeset ANS[2]="N/A"
  typeset REMARK="undefined"
  typeset X=","
  typeset RETCODE="99"
  typeset STATUS="${X}${X}${ANS[2]}"
  typeset STATUS="${X}${ANS[2]}"
  typeset QUOTED="${FALSE}"
  typeset RESULT="undefined"
  typeset BGGOOD="${BGGOOD:-lightgreen}"
  typeset BGBAD="${BGBAD:-pink}"
  typeset BGNA="${BGNA:-#999999}"

################################################################

#### 
#### Process the command line options and arguments, saving
#### the values as appropriate.
#### 

#### htmlout -X "${X}" -Q -R "${RESULT}"      -D "${DESC}"    -S "${STATUS}"
####                     -B "${VERIFIEDBY}"  -M "${REMARK}"  -C "${RETCODE}"

  while getopts ":vVu:X:R:D:B:M:C:Q" OPTION
  do
      case "${OPTION}" in
          'u') VERIFIEDBY="${OPTARG}";;
          'X') X="${OPTARG}";;
          'Q') QUOTED="${TRUE}";;
          'R') RESULT="${OPTARG}";;
          'D') DESC="${OPTARG}";;
          'B') VERIFIEDBY="${OPTARG}";;
          'M') REMARK="${OPTARG}";;
          'C') RETCODE="${OPTARG}";;
          'v') VERBOSE="${TRUE}";;
          'V') VERYVERB="${TRUE}";;
          '?') usagemsg_htmlout_zbksh "${0}" ${VERSION} && return 1 ;;
          ':') usagemsg_htmlout_zbksh "${0}" ${VERSION} && return 1 ;;
      esac
  done
   
  shift $(( ${OPTIND} - 1 ))
  
#### 
#### Check the command line arguments to verify they are valid values and that all
#### necessary information was specified.
#### 

  trap "usagemsg_htmlout_zbksh ${0}" EXIT

  if [[ "_${VERIFIEDBY}" == "_" ]]
  then
    stderr_zbksh -- "# ERROR: Verified By User not specified"
    return 2
  fi

  trap "-" EXIT
  
################################################################

#### 
#### Display some program info and the command line arguments specified
#### if "VERBOSE" mode was specified.
#### 

  (( VERYVERB == TRUE )) && set -x
  (( VERBOSE  == TRUE )) && stderr_zbksh -- "# Program........: ${0}"
  (( VERBOSE  == TRUE )) && stderr_zbksh -- "# Version........: ${VERSION}"
  (( VERBOSE  == TRUE )) && stderr_zbksh -- "# Verified By....: ${VERIFIEDBY}"

################################################################
################################################################
################################################################

  Z="</TD>"
  X="${Z}<TD>"

  [[ "_${RESULT}" == "_${ANS[0]}" ]] && A="<TD Bgcolor=\"${BGGOOD}\" Width=\"25%\">"
  [[ "_${RESULT}" == "_${ANS[1]}" ]] && A="<TD Bgcolor=\"${BGBAD}\" Width=\"25%\">"
  [[ "_${RESULT}" == "_${ANS[2]}" ]] && A="<TD Bgcolor=\"${BGNA}\" Width=\"25%\">"

  [[ "_${RESULT}" == "_${ANS[0]}" ]] && X="${Z}<TD Bgcolor=\"${BGGOOD}\">"
  [[ "_${RESULT}" == "_${ANS[1]}" ]] && X="${Z}<TD Bgcolor=\"${BGBAD}\">"
  [[ "_${RESULT}" == "_${ANS[2]}" ]] && X="${Z}<TD Bgcolor=\"${BGNA}\">"

# Obsolete   [[ "_${RESULT}" == "_${ANS[0]}" ]] && STATUS="${ANS[0]}${X}${X}"
# Obsolete   [[ "_${RESULT}" == "_${ANS[1]}" ]] && STATUS="${X}${ANS[1]}${X}"
# Obsolete   [[ "_${RESULT}" == "_${ANS[2]}" ]] && STATUS="${X}${X}${ANS[2]}"

  [[ "_${RESULT}" == "_${ANS[0]}" ]] && STATUS="${ANS[0]}${X}"
  [[ "_${RESULT}" == "_${ANS[1]}" ]] && STATUS="${ANS[1]}${X}"
  [[ "_${RESULT}" == "_${ANS[2]}" ]] && STATUS="${X}${ANS[2]}"

  DESC=$( stdout_zbksh -- "${DESC}" | sed -e 's/$/<BR\/>/g' )
  REMARK=$( stdout_zbksh -- "${REMARK}" | sed -e 's/$/<BR\/>/g' )

  (( VERBOSE == TRUE )) && stderr_zbksh -- "# <P><TR>${A} Description ${X} Result ${X} Verified By ${X} Remarks ${X} Return Code ${Z}</TR></P>"
  stdout_zbksh -- "<P><TR>${A}${DESC}${X}${STATUS}${X}${VERIFIEDBY}${X}${REMARK}${X}${RETCODE}${Z}</TR></P>"
  RETCODE="${?}"

  return ${RETCODE}

}
################################################################
