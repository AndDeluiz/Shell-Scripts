#!/usr/bin/ksh93
################################################################################
# @author      Anderson Deluiz - twitter: @anddeluiz                           #
# @name        backupVios                                                      #
# @version     1.0                                                             #
# @date        Aug 22, 2014                                                    #
# @description Creates an installable image of VIOS root volume group onto a   #
#              filesystem. It can also backup virtual and logical configuration#
#              of VIOS to disk using viobr command.                            #
# @usage       backupVios --help                                               #
################################################################################

#---------------------------        INCLUDE       -----------------------------#

#---------------------------     DEBUG OPTIONS    -----------------------------#
# uncomment line(s) to activate debug function
# set -x    # print a trace of simple commands and their arguments
# set -v    # print shell input lines as they are read
# set -n    # read commands but do not execute them

#---------------------------   GLOBAL VARIABLES   -----------------------------#
myName=$(basename $0)
osName=$(uname -s)
myVersion=$(awk '/^# @version/ {print $3}' ${myName})
myHostname=$(hostname)

# Logfile definitions
myLogDir=/home/padmin/log/${myName%.*}
myLogFile=${myLogDir}/${myName%.*}-$(date "+%Y%m%d-%H%M%S").log
myLogFilePattern="${myLogDir}/${myName%.*}*.log"
numOfLogFiles=12

# VIOS Command Line Interface
cmdIOSCLI=/usr/ios/cli/ioscli

# E-mail definitions
doNotSendMail=0
cmdMail=/usr/bin/mailx
smtpRcptAddress="address@domain"
smtpMailSubject="[${myName}] ${myHostname} - Log de execucao $(date "+%d/%m/%Y")"

# Null global variables
noMediaLib=0
backupType=
backupFile=
nimBkupDir=

#---------------------------       FUNCTIONS      -----------------------------#

#------------------------------------------------------------------------------#
# @function    usage                                                           #
# @description Displays usage of this script and help messages and exit script.#
#                                                                              #
# @usage       usage                                                           #
# @in          none                                                            #
# @return      none                                                            #
# @return-code                                                                 #
#              none                                                            #
# @exit-code                                                                   #
#              255 - normal exit code                                          #
#------------------------------------------------------------------------------#
usage()
{
   cat << _EOF_

${myName} version ${myVersion}

   Purpose
   =======
   Creates an installable image of VIOS root volume group onto a filesystem.
   It can also backup virtual and logical configuration of VIOS to padmin's home
   directory using viosbr command.

   Syntax
   ======
   ${myName} --mksysb --file <file> [--nomedialib] [--nomail] [-- <additional flags>]
   ${myName} --nim --dir <directory> [--nomedialib] [--nomail] [-- <additional flags>]
   ${myName} --config [--file <file>] [--nomail] [-- <additional flags>]
   ${myName} [-h | --help]

   Flags
   =====
   --mksysb     Creates a mksysb image to a file specified by --file flag that
                can be installed using HMC or NIM (uses backupios command)

   --nim        Backup VIO Server system to a remote filesystem by creating a
                nim_resources.tar file in directory specified by --dir flag.
                This file contains all necessary resources to restore VIOS using
                NIM or installios command on HMC (uses backupios command).

   --config     Creates a backup file with viobr command that contains all
                virtual and logical configuration from VIOS.

   --file       Specify file name to place VIOS mksysb backup.

   --dir        Specify directory name to place nim_resources.tar file.

   --nomedialib Does not backup VIOS virtual media library.

   --nomail     Does not send an email to support team as defined in
                supportMailAddress internal variable.
                Default: $(echo "${smtpRcptAddress}\c")

   --           Specify additional flags to be passed directely to backupios
                or viobr commands. Must be placed at the end of the line for
                correct parsing.

_EOF_
   exit 255
}

#------------------------------------------------------------------------------#
# @function    parse                                                           #
# @description Parses provided arguments.                                      #
#                                                                              #
# @usage       parse <arguments>                                               #
# @in          All arguments provided from command line for execution.         #
# @return      none                                                            #
# @return-code                                                                 #
#              none                                                            #
# @exit-code                                                                   #
#              none                                                            #
#------------------------------------------------------------------------------#
parse()
{
   while [ $# -ne 0 ]
   do
      case $1 in
         '--mksysb')
            if [ -z "${backupType}" ]
            then
               backupType="mksysb"
            else
               usage
            fi
            ;;
         '--nim')
            if [ -z "${backupType}" ]
            then
               backupType="nim"
            else
               usage
            fi
            ;;
         '--config')
            if [ -z "${backupType}" ]
            then
               backupType="config"
            else
               usage
            fi
            ;;
         '--file')
            shift
            backupFile="$1"
            ;;
         '--dir')
            shift
            nimBkupDir="$1"
            ;;
         '--nomedialib')
            noMediaLib=1
            ;;
         '--nomail')
            doNotSendMail=1
            ;;
         '--')
            shift
            additionalArgs="$*"
            ;;
         '--help'|'-h')
            usage
            ;;
         *)
            usage
            ;;
      esac
      shift
   done

   case ${backupType} in
      "mksysb"|"config")
         [ -z "${backupFile}" ] && usage
         ;;
      "nim")
         [ -z "${nimBkupDir}" ] && usage
         ;;
   esac

   return 0
}

#------------------------------------------------------------------------------#
# @function    cleanOldLogs                                                    #
# @description Clean old log files.                                            #
#                                                                              #
# @usage       cleanOldLogs <logfile_pattern> <files_to_keep>                  #
# @in          logfile_pattern - Pattern for logfiles matching                 #
#              files_to_keep - Number of files to keep in disk                 #
# @out         Names of removed files                                          #
# @return-code                                                                 #
#              none                                                            #
# @exit-code                                                                   #
#              none                                                            #
#------------------------------------------------------------------------------#
cleanOldLogs()
{
   logFilePattern=$1
   numOfFilesToKeep=$2

   # Define file list array
   set -A logFileArray $(ls -t ${logFilePattern} 2> /dev/null)

   logFileArraySize=${#logFileArray[@]}
   if [ ${logFileArraySize} -gt ${numOfFilesToKeep} ]
   then
      while [ ${logFileArraySize} -ne ${numOfFilesToKeep} ]
      do
         echo "cleanOldLogs(): removing ${logFileArray[${logFileArraySize}-1]} \c"
         rm -f ${logFileArray[${logFileArraySize}-1]} 2> /dev/null && echo "[OK]" || echo "[FAIL]"
         logFileArraySize=$((logFileArraySize - 1))
      done
   fi

   unset logFilePattern numOfFilesToKeep logFile logFileArray logFileArraySize

}

#------------------------------------------------------------------------------#
# @function    sendLogByMail                                                   #
# @description Send input logfile by email to                                  #
#                                                                              #
# @usage       sendLogByMail <logfile> <@address>                              #
# @in          logfile - Log file to send by email                             #
#              @address - recipient(s) e-mail address. If more than one speci- #
#                         fied, must be separated by commas(,).                #
# @return      none                                                            #
# @return-code 0 - successful                                                  #
#              1 - unsuccessful                                                #
# @exit-code                                                                   #
#              none                                                            #
#------------------------------------------------------------------------------#
sendLogByMail()
{
   ${cmdMail} -s "${mailSubject}" $2 < $1 && return 0 || return 1
}

#---------------------------     MAIN SECTION     -----------------------------#

# Parse provided arguments
parse $*

# Redirects stdout and stderr to log file
#[ ! -d ${myLogDir} ] && mkdir -p ${myLogDir}
exec > ${myLogFile} 2>&1

# Check if running as root
if [ $(id -un) != "root" ]
then
   echo "ERROR: Command must be run as root user"
   exit 127
fi

cleanOldLogs "${myLogFilePattern}" ${numOfLogFiles}

# Check for ioscli command availability
if [ ! -x ${cmdIOSCLI}  ]
then
   echo "ERROR: ${cmdIOSCLI} command is not available in this system"
   exit 126
fi

# Assembly command line for backup execution
case ${backupType} in
   'mksysb'|'nim')
      cmdToExec="${cmdIOSCLI} backupios"
      [ ${noMediaLib} -eq 1 ] && cmdToExec="${cmdToExec} -nomedialib"
      case ${backupType} in
         'mksysb')
            cmdToExec="${cmdToExec} -mksysb"
            if [ ! -z ${backupFile}  ]
            then
               cmdToExec="${cmdToExec} -file ${backupFile} ${additionalArgs}"
            else
               echo "ERROR: No destination file specified with --file option."
               exit 125
            fi
            ;;
         'nim')
            #if [ -w ${nimBkupDir}  ]
            #then
               cmdToExec="${cmdToExec} -file ${nimBkupDir} ${additionalArgs}"
            #else
            #   echo "ERROR: ${nimBkupDir} is not writable or does not exist."
            #   exit 124
            #fi
            ;;
      esac
      ;;
   'config')
      cmdToExec="${cmdIOSCLI} viobr -backup"
      if [ ! -z ${backupFile}  ]
      then
         cmdToExec="${cmdToExec} -file ${backupFile} ${additionalArgs}"
      else
         echo "ERROR: No destination file specified with --file option."
         exit 125
      fi
      ;;
esac

# Execute backup command
echo "INFO: $(date) - Starting backup execution ..."
echo "INFO: Command: ${cmdToExec}"
${cmdToExec}
echo "INFO: $(date) - End backup"

if [ ${doNotSendMail} -eq 0 ]
then
   echo "INFO: Sending execution log by mail to ${smtpRcptAddress} \c"
   sendLogByMail ${myLogFile} ${smtpRcptAddress} && echo "[OK]" || echo "[FAIL]"
fi

exit 0
